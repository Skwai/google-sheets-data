{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"6hBAAA,KAAM,mBAAoB,0EAA1B,CACM,WAAa,MADnB,CAMe,KAAM,iBAAiB,CAKpC,cAAsB,CACpB,GAAI,EAAJ,CAAc,KAAM,OAAM,gDAAN,CAAN,CACd,OAAO,MAAP,CAAc,IAAd,CAAoB,CAAE,SAAF,CAApB,CACD,CAMK,OAAN,EAAiB,iDACf,KAAM,GAAO,KAAM,kBAAiB,cAAjB,CAAgC,EAAK,OAArC,CAAnB,CACA,MAAO,kBAAiB,OAAjB,CAAyB,EAAK,IAAL,CAAU,KAAnC,CAFQ,IAGhB,CAOD,MAAO,QAAP,GAAsB,CACpB,MAAO,GAAK,GAAL,CAAS,iBAAiB,MAA1B,CACR,CAOD,MAAO,OAAP,GAAoB,CAClB,KAAM,GAAO,iBAAiB,UAAjB,GAAb,CACA,MAAO,GAAK,MAAL,CAAY,OAAY,CAC7B,KAAM,GAAM,iBAAiB,iBAAjB,GAAZ,CACA,MAAO,QAAO,MAAP,gBAEL,IAAO,KAAO,EAFT,GAIR,CANM,IAOR,CAOD,MAAO,kBAAP,GAA+B,CAC7B,MAAO,GAAI,OAAJ,CAAY,UAAZ,CAAwB,EAAxB,CACR,CAMD,MAAO,WAAP,GAAwB,CACtB,MAAO,QAAO,IAAP,IACJ,MADI,CACG,KAAK,EAAE,QAAF,CAAW,UAAX,CADR,CAER,CAOD,MAAa,eAAb,GAAsC,sCACpC,KAAM,GAAM,kBAAkB,OAAlB,CAA0B,IAA1B,GAAZ,CACM,EAAW,KAAM,SAAW,CAChC,KAAM,MAD0B,CAAX,CADvB,CAIA,MAAO,GAAS,IAAT,EAL6B,IAMrC,CAzEmC,C,gBAAjB,gB","file":"index.js","sourcesContent":["const GOOGLE_SHEETS_URL = 'https://spreadsheets.google.com/feeds/list/%s/od6/public/values?alt=json'\nconst COL_PREFIX = 'gsx$'\n\n/**\n * Class representing a Google Sheet\n */\nexport default class GoogleSheetsData {\n  /**\n   * Create a Google Sheet\n   * @param {String} sheetId\n   */\n  constructor (sheetId) {\n    if (!sheetId) throw Error('You must supply a `sheetId` to the constructor')\n    Object.assign(this, { sheetId })\n  }\n\n  /**\n   * Get the sheet data and return the rows from it\n   * @return {Promise.<Array>} The rows in the sheet\n   */\n  async getData () {\n    const data = await GoogleSheetsData.fetchSheetData(this.sheetId)\n    return GoogleSheetsData.mapRows(data.feed.entry)\n  }\n\n  /**\n   * Format an array of rows\n   * @param {Array} rows The raw rows from the sheet\n   * @return {Array} The formatted row data\n   */\n  static mapRows (rows) {\n    return rows.map(GoogleSheetsData.mapRow)\n  }\n\n  /**\n   * Format a single sheet row\n   * @param {Object} row A single raw row from the sheet\n   * @return {Object} The formatted array with the sheet column name of each property as the key\n   */\n  static mapRow (row) {\n    const keys = GoogleSheetsData.getRowKeys(row)\n    return keys.reduce((obj, k) => {\n      const key = GoogleSheetsData.stripColumnPrefix(k)\n      return Object.assign({\n        ...obj,\n        [key]: row[k].$t\n      })\n    }, {})\n  }\n\n  /**\n   * Sanitize a column name by stripping the Google Sheets prefix\n   * @param {String} str\n   * @return {String}\n   */\n  static stripColumnPrefix (str) {\n    return str.replace(COL_PREFIX, '')\n  }\n\n  /**\n   * Get the column keys of a sheet row\n   * @return {Array} Array of column keys\n   */\n  static getRowKeys (row) {\n    return Object.keys(row)\n      .filter(k => k.includes(COL_PREFIX))\n  }\n\n  /**\n   * Fetch the JSON data from the sheet\n   * @param {String} sheetId The ID of the Google Sheet\n   * @return {Promise.<Object>} The Google Sheet data\n   */\n  static async fetchSheetData (sheetId) {\n    const url = GOOGLE_SHEETS_URL.replace('%s', sheetId)\n    const response = await fetch(url, {\n      mode: 'cors'\n    })\n    return response.json()\n  }\n}\n"]}