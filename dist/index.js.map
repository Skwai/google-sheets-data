{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAM,oBAAoB,0EAA1B;AACA,MAAM,aAAa,MAAnB;;AAEA;;;AAGA,MAAM,KAAN,CAAY;;AAGV;;;;AAIA,cAAa,OAAb,EAAsB;AAAA,SANtB,OAMsB,GANZ,IAMY;;AACpB,QAAI,CAAC,OAAL,EAAc;AACZ,YAAM,MAAM,wDAAN,CAAN;AACD;AACD,WAAO,MAAP,CAAc,IAAd,EAAoB,EAAE,OAAF,EAApB;AACD;;AAED;;;AAGM,SAAN,GAAiB;AAAA;;AAAA;AACf,YAAM,OAAO,MAAM,MAAM,cAAN,CAAqB,MAAK,OAA1B,CAAnB;AACA,aAAO,MAAM,OAAN,CAAc,KAAK,IAAL,CAAU,KAAxB,CAAP;AAFe;AAGhB;;AAED,SAAO,OAAP,CAAe,IAAf,EAAqB;AACnB,WAAO,KAAK,GAAL,CAAS,MAAM,MAAf,CAAP;AACD;;AAED,SAAO,MAAP,CAAc,GAAd,EAAmB;AACjB,WAAO,OAAO,IAAP,CAAY,GAAZ,EACJ,MADI,CACG,KAAK,EAAE,QAAF,CAAW,UAAX,CADR,EAEJ,MAFI,CAEG,CAAC,GAAD,EAAM,CAAN,KAAY;AAClB;AACA,YAAM,MAAM,EAAE,OAAF,CAAU,UAAV,EAAsB,EAAtB,CAAZ;AACA,aAAO,OAAO,MAAP,cACF,GADE;AAEL,SAAC,GAAD,GAAO,IAAI,CAAJ,EAAO;AAFT,SAAP;AAID,KATI,EASF,EATE,CAAP;AAUD;;AAED;;;;AAIA,SAAa,cAAb,CAA6B,OAA7B,EAAsC;AAAA;AACpC,YAAM,MAAM,kBAAkB,OAAlB,CAA0B,IAA1B,EAAgC,OAAhC,CAAZ;AACA,YAAM,WAAW,MAAM,MAAM,GAAN,EAAW;AAChC,cAAM;AAD0B,OAAX,CAAvB;AAGA,aAAO,MAAM,SAAS,IAAT,EAAb;AALoC;AAMrC;AAjDS;;AAoDZ,OAAO,KAAP,GAAe,KAAf;;kBAEe,K","file":"index.js","sourcesContent":["const GOOGLE_SHEETS_URL = 'https://spreadsheets.google.com/feeds/list/%s/od6/public/values?alt=json'\nconst COL_PREFIX = 'gsx$'\n\n/**\n * Class representing a Google Sheet\n */\nclass Sheet {\n  sheetId = null\n\n  /**\n   * Create a Google Sheet\n   * @param {String} sheetId \n   */\n  constructor (sheetId) {\n    if (!sheetId) {\n      throw Error('You must pass a `sheetId` to `Sheet` class constructor')\n    }\n    Object.assign(this, { sheetId })\n  }\n\n  /**\n   * @return {Promise}\n   */\n  async getData () {\n    const data = await Sheet.fetchSheetData(this.sheetId)\n    return Sheet.mapRows(data.feed.entry)\n  }\n\n  static mapRows(rows) {\n    return rows.map(Sheet.mapRow)\n  }\n\n  static mapRow(row) {\n    return Object.keys(row)\n      .filter(k => k.includes(COL_PREFIX))\n      .reduce((obj, k) => {\n        // strip prefix from key\n        const key = k.replace(COL_PREFIX, '')\n        return Object.assign({\n          ...obj,\n          [key]: row[k].$t\n        })\n      }, {})\n  }\n\n  /**\n   * @param {String} sheetId The ID of the Google Sheet\n   * @return {Promise.<Object>} The Google Sheet data\n   */\n  static async fetchSheetData (sheetId) {\n    const url = GOOGLE_SHEETS_URL.replace('%s', sheetId);\n    const response = await fetch(url, {\n      mode: 'cors'\n    })\n    return await response.json()\n  }\n}\n\nwindow.Sheet = Sheet\n\nexport default Sheet"]}